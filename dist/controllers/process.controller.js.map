{"version":3,"sources":["../../src/controllers/process.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport ProcessService from '@/services/process.service';\nimport { Entry, Process, EntriesOnProcess } from '@prisma/client';\nimport { CreateProcessDto } from '@/dtos/process.dto';\n\nclass ProcessController {\n  public service = new ProcessService();\n\n  public getAll = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const areas: Process[] = await this.service.getAll();\n\n      res.status(200).json({ data: areas, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getGivenAreaAndGroup = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { groupId, areaId } = req.params;\n      const processes: Process[] = await this.service.getGivenAreaAndGroup(Number(areaId), Number(groupId));\n\n      res.status(200).json({ data: processes, message: 'findFiltered' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getGivenId = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const findArea = await this.service.getGivenId(id);\n\n      res.status(200).json({ data: findArea, message: 'findOne' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const data: CreateProcessDto = req.body;\n      const createAreaData: Process = await this.service.create(data);\n\n      res.status(201).json({ data: createAreaData, message: 'created' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public update = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const data: CreateProcessDto = req.body;\n      const updateUserData: Process = await this.service.update(id, data);\n\n      res.status(200).json({ data: updateUserData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public delete = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const deleteUserData: Process = await this.service.delete(id);\n\n      res.status(200).json({ data: deleteUserData, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default ProcessController;\n"],"names":["ProcessController","service","ProcessService","getAll","req","res","next","areas","status","json","data","message","error","getGivenAreaAndGroup","groupId","areaId","params","processes","Number","getGivenId","id","findArea","create","body","createAreaData","update","updateUserData","delete","deleteUserData"],"mappings":"AAAA;;;;+BA2EA;;aAAA;;uDA1E2B;;;;;;AAI3B,IAAA,AAAMA,oBAAN,MAAMA;;aACGC,UAAU,IAAIC,uBAAc;aAE5BC,SAAS,OAAOC,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMC,QAAmB,MAAM,IAAI,CAACN,OAAO,CAACE,MAAM;gBAElDE,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMH;oBAAOI,SAAS;gBAAU;YACzD,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOC,uBAAuB,OAAOT,KAAcC,KAAeC,OAAsC;YACtG,IAAI;gBACF,MAAM,EAAEQ,QAAO,EAAEC,OAAM,EAAE,GAAGX,IAAIY,MAAM;gBACtC,MAAMC,YAAuB,MAAM,IAAI,CAAChB,OAAO,CAACY,oBAAoB,CAACK,OAAOH,SAASG,OAAOJ;gBAE5FT,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMO;oBAAWN,SAAS;gBAAe;YAClE,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOO,aAAa,OAAOf,KAAcC,KAAeC,OAAsC;YAC5F,IAAI;gBACF,MAAMc,KAAKF,OAAOd,IAAIY,MAAM,CAACI,EAAE;gBAC/B,MAAMC,WAAW,MAAM,IAAI,CAACpB,OAAO,CAACkB,UAAU,CAACC;gBAE/Cf,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMW;oBAAUV,SAAS;gBAAU;YAC5D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOU,SAAS,OAAOlB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMI,OAAyBN,IAAImB,IAAI;gBACvC,MAAMC,iBAA0B,MAAM,IAAI,CAACvB,OAAO,CAACqB,MAAM,CAACZ;gBAE1DL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMc;oBAAgBb,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOa,SAAS,OAAOrB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMc,KAAKF,OAAOd,IAAIY,MAAM,CAACI,EAAE;gBAC/B,MAAMV,OAAyBN,IAAImB,IAAI;gBACvC,MAAMG,iBAA0B,MAAM,IAAI,CAACzB,OAAO,CAACwB,MAAM,CAACL,IAAIV;gBAE9DL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMgB;oBAAgBf,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOe,SAAS,OAAOvB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMc,KAAKF,OAAOd,IAAIY,MAAM,CAACI,EAAE;gBAC/B,MAAMQ,iBAA0B,MAAM,IAAI,CAAC3B,OAAO,CAAC0B,MAAM,CAACP;gBAE1Df,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMkB;oBAAgBjB,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;;AACF;MAEA,WAAeZ"}