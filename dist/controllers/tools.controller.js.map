{"version":3,"sources":["../../src/controllers/tools.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Tool } from '@prisma/client';\nimport { CreateEntryExitDto } from '@/dtos/process.dto';\nimport ToolsService from '@/services/tools.service';\n\nclass ToolsController {\n  public service = new ToolsService();\n\n  public getAll = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const groups: Tool[] = await this.service.getAll();\n\n      res.status(200).json({ data: groups, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  // public getGivenId = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n  //   try {\n  //     const id = Number(req.params.id);\n  //     const findArea: Tool = await this.service.getGivenId(id);\n\n  //     res.status(200).json({ data: findArea, message: 'findOne' });\n  //   } catch (error) {\n  //     next(error);\n  //   }\n  // };\n\n  public create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const data: CreateEntryExitDto = req.body;\n      const createData: Tool = await this.service.create(data);\n\n      res.status(201).json({ data: createData, message: 'created' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public update = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const data: CreateEntryExitDto = req.body;\n      const groupData: Tool = await this.service.update(id, data);\n\n      res.status(200).json({ data: groupData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public delete = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const deleteData: Tool = await this.service.delete(id);\n\n      res.status(200).json({ data: deleteData, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default ToolsController;\n"],"names":["ToolsController","service","ToolsService","getAll","req","res","next","groups","status","json","data","message","error","create","body","createData","update","id","Number","params","groupData","delete","deleteData"],"mappings":"AAAA;;;;+BAgEA;;aAAA;;qDA7DyB;;;;;;AAEzB,IAAA,AAAMA,kBAAN,MAAMA;;aACGC,UAAU,IAAIC,qBAAY;aAE1BC,SAAS,OAAOC,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMC,SAAiB,MAAM,IAAI,CAACN,OAAO,CAACE,MAAM;gBAEhDE,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMH;oBAAQI,SAAS;gBAAU;YAC1D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAaOC,SAAS,OAAOT,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMI,OAA2BN,IAAIU,IAAI;gBACzC,MAAMC,aAAmB,MAAM,IAAI,CAACd,OAAO,CAACY,MAAM,CAACH;gBAEnDL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMK;oBAAYJ,SAAS;gBAAU;YAC9D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOI,SAAS,OAAOZ,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMW,KAAKC,OAAOd,IAAIe,MAAM,CAACF,EAAE;gBAC/B,MAAMP,OAA2BN,IAAIU,IAAI;gBACzC,MAAMM,YAAkB,MAAM,IAAI,CAACnB,OAAO,CAACe,MAAM,CAACC,IAAIP;gBAEtDL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMU;oBAAWT,SAAS;gBAAU;YAC7D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOS,SAAS,OAAOjB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMW,KAAKC,OAAOd,IAAIe,MAAM,CAACF,EAAE;gBAC/B,MAAMK,aAAmB,MAAM,IAAI,CAACrB,OAAO,CAACoB,MAAM,CAACJ;gBAEnDZ,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMY;oBAAYX,SAAS;gBAAU;YAC9D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;;AACF;MAEA,WAAeZ"}