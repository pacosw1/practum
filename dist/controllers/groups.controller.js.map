{"version":3,"sources":["../../src/controllers/groups.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Group } from '@prisma/client';\nimport GroupService from '@/services/groups.service';\nimport { CreateGroupDto } from '@/dtos/groups.dto';\n\nclass GroupsController {\n  public service = new GroupService();\n\n  public getAll = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const groups: Group[] = await this.service.getAll();\n\n      res.status(200).json({ data: groups, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getGivenId = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const findArea: Group = await this.service.getGivenId(id);\n\n      res.status(200).json({ data: findArea, message: 'findOne' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const data: CreateGroupDto = req.body;\n      const createData: Group = await this.service.create(data);\n\n      res.status(201).json({ data: createData, message: 'created' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public update = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const data: CreateGroupDto = req.body;\n      const groupData: Group = await this.service.update(id, data);\n\n      res.status(200).json({ data: groupData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public delete = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const deleteData: Group = await this.service.delete(id);\n\n      res.status(200).json({ data: deleteData, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default GroupsController;\n"],"names":["GroupsController","service","GroupService","getAll","req","res","next","groups","status","json","data","message","error","getGivenId","id","Number","params","findArea","create","body","createData","update","groupData","delete","deleteData"],"mappings":"AAAA;;;;+BAgEA;;aAAA;;sDA9DyB;;;;;;AAGzB,IAAA,AAAMA,mBAAN,MAAMA;;aACGC,UAAU,IAAIC,sBAAY;aAE1BC,SAAS,OAAOC,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMC,SAAkB,MAAM,IAAI,CAACN,OAAO,CAACE,MAAM;gBAEjDE,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMH;oBAAQI,SAAS;gBAAU;YAC1D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOC,aAAa,OAAOT,KAAcC,KAAeC,OAAsC;YAC5F,IAAI;gBACF,MAAMQ,KAAKC,OAAOX,IAAIY,MAAM,CAACF,EAAE;gBAC/B,MAAMG,WAAkB,MAAM,IAAI,CAAChB,OAAO,CAACY,UAAU,CAACC;gBAEtDT,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMO;oBAAUN,SAAS;gBAAU;YAC5D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOM,SAAS,OAAOd,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMI,OAAuBN,IAAIe,IAAI;gBACrC,MAAMC,aAAoB,MAAM,IAAI,CAACnB,OAAO,CAACiB,MAAM,CAACR;gBAEpDL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMU;oBAAYT,SAAS;gBAAU;YAC9D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOS,SAAS,OAAOjB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMQ,KAAKC,OAAOX,IAAIY,MAAM,CAACF,EAAE;gBAC/B,MAAMJ,OAAuBN,IAAIe,IAAI;gBACrC,MAAMG,YAAmB,MAAM,IAAI,CAACrB,OAAO,CAACoB,MAAM,CAACP,IAAIJ;gBAEvDL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMY;oBAAWX,SAAS;gBAAU;YAC7D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;aAEOW,SAAS,OAAOnB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMQ,KAAKC,OAAOX,IAAIY,MAAM,CAACF,EAAE;gBAC/B,MAAMU,aAAoB,MAAM,IAAI,CAACvB,OAAO,CAACsB,MAAM,CAACT;gBAEpDT,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMc;oBAAYb,SAAS;gBAAU;YAC9D,EAAE,OAAOC,OAAO;gBACdN,KAAKM;YACP;QACF;;AACF;MAEA,WAAeZ"}