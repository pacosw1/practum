{"version":3,"sources":["../../src/controllers/areas.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Area } from '@prisma/client';\nimport AreaService from '@/services/area.service';\nimport { CreateAreaDto } from '@/dtos/areas.dto';\n\nclass AreasController {\n  public service = new AreaService();\n\n  public getAreas = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const areas: Area[] = await this.service.getAllAreas();\n\n      res.status(200).json({ data: areas, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getAreaGivenId = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const findArea: Area = await this.service.getAreaGivenId(id);\n\n      res.status(200).json({ data: findArea, message: 'findOne' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createArea = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const data: CreateAreaDto = req.body;\n      const createAreaData: Area = await this.service.createArea(data);\n\n      res.status(201).json({ data: createAreaData, message: 'created' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public updateArea = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const data: CreateAreaDto = req.body;\n      const updateUserData: Area = await this.service.updateArea(id, data);\n\n      res.status(200).json({ data: updateUserData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public deleteArea = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const id = Number(req.params.id);\n      const deleteUserData: Area = await this.service.deleteArea(id);\n\n      res.status(200).json({ data: deleteUserData, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default AreasController;\n"],"names":["AreasController","service","AreaService","getAreas","req","res","next","areas","getAllAreas","status","json","data","message","error","getAreaGivenId","id","Number","params","findArea","createArea","body","createAreaData","updateArea","updateUserData","deleteArea","deleteUserData"],"mappings":"AAAA;;;;+BAgEA;;aAAA;;oDA9DwB;;;;;;AAGxB,IAAA,AAAMA,kBAAN,MAAMA;;aACGC,UAAU,IAAIC,oBAAW;aAEzBC,WAAW,OAAOC,KAAcC,KAAeC,OAAsC;YAC1F,IAAI;gBACF,MAAMC,QAAgB,MAAM,IAAI,CAACN,OAAO,CAACO,WAAW;gBAEpDH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMJ;oBAAOK,SAAS;gBAAU;YACzD,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOC,iBAAiB,OAAOV,KAAcC,KAAeC,OAAsC;YAChG,IAAI;gBACF,MAAMS,KAAKC,OAAOZ,IAAIa,MAAM,CAACF,EAAE;gBAC/B,MAAMG,WAAiB,MAAM,IAAI,CAACjB,OAAO,CAACa,cAAc,CAACC;gBAEzDV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMO;oBAAUN,SAAS;gBAAU;YAC5D,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOM,aAAa,OAAOf,KAAcC,KAAeC,OAAsC;YAC5F,IAAI;gBACF,MAAMK,OAAsBP,IAAIgB,IAAI;gBACpC,MAAMC,iBAAuB,MAAM,IAAI,CAACpB,OAAO,CAACkB,UAAU,CAACR;gBAE3DN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMU;oBAAgBT,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOS,aAAa,OAAOlB,KAAcC,KAAeC,OAAsC;YAC5F,IAAI;gBACF,MAAMS,KAAKC,OAAOZ,IAAIa,MAAM,CAACF,EAAE;gBAC/B,MAAMJ,OAAsBP,IAAIgB,IAAI;gBACpC,MAAMG,iBAAuB,MAAM,IAAI,CAACtB,OAAO,CAACqB,UAAU,CAACP,IAAIJ;gBAE/DN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMY;oBAAgBX,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOW,aAAa,OAAOpB,KAAcC,KAAeC,OAAsC;YAC5F,IAAI;gBACF,MAAMS,KAAKC,OAAOZ,IAAIa,MAAM,CAACF,EAAE;gBAC/B,MAAMU,iBAAuB,MAAM,IAAI,CAACxB,OAAO,CAACuB,UAAU,CAACT;gBAE3DV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMc;oBAAgBb,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;;AACF;MAEA,WAAeb"}