{"version":3,"sources":["../../src/services/groups.service.ts"],"sourcesContent":["import { Group, PrismaClient } from '@prisma/client';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateGroupDto } from '@/dtos/groups.dto';\n\nclass GroupService {\n  public groups = new PrismaClient().group;\n\n  public async getAll(): Promise<Group[]> {\n    const allGroups: Group[] = await this.groups.findMany({\n      orderBy: {\n        id: 'asc',\n      },\n    });\n    return allGroups;\n  }\n\n  public async getGivenId(id: number): Promise<Group> {\n    if (isEmpty(id)) throw new HttpException(400, 'id is empty');\n\n    const findGroup: Group = await this.groups.findUnique({ where: { id: id } });\n    if (!findGroup) throw new HttpException(409, \"Group doesn't exist\");\n\n    return findGroup;\n  }\n\n  public async create(data: CreateGroupDto): Promise<Group> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findGroup: Group = await this.groups.findUnique({ where: { name: data.name } });\n    if (findGroup) throw new HttpException(409, `Group with title ${data.name} already exists`);\n\n    const createdata: Group = await this.groups.create({ data: { ...data } });\n    return createdata;\n  }\n\n  public async update(id: number, data: CreateGroupDto): Promise<Group> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findGroup: Group = await this.groups.findUnique({ where: { id: id } });\n    if (!findGroup) throw new HttpException(409, \"Group doesn't exist\");\n\n    const newGroup = await this.groups.update({ where: { id: id }, data: { ...data } });\n    return newGroup;\n  }\n\n  public async delete(id: number): Promise<Group> {\n    if (isEmpty(id)) throw new HttpException(400, \"Group doesn't existId\");\n\n    const findGroup: Group = await this.groups.findUnique({ where: { id: id } });\n    if (!findGroup) throw new HttpException(409, \"Group doesn't exist\");\n\n    const deleteGroup = await this.groups.delete({ where: { id: id } });\n    return deleteGroup;\n  }\n}\n\nexport default GroupService;\n"],"names":["GroupService","getAll","allGroups","groups","findMany","orderBy","id","getGivenId","isEmpty","HttpException","findGroup","findUnique","where","create","data","name","createdata","update","newGroup","delete","deleteGroup","PrismaClient","group"],"mappings":"AAAA;;;;+BAyDA;;aAAA;;wBAzDoC;+BACN;sBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGxB,IAAA,AAAMA,eAAN,MAAMA;IAGJ,MAAaC,SAA2B;QACtC,MAAMC,YAAqB,MAAM,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC;YACpDC,SAAS;gBACPC,IAAI;YACN;QACF;QACA,OAAOJ;IACT;IAEA,MAAaK,WAAWD,EAAU,EAAkB;QAClD,IAAIE,IAAAA,aAAO,EAACF,KAAK,MAAM,IAAIG,4BAAa,CAAC,KAAK,eAAe;QAE7D,MAAMC,YAAmB,MAAM,IAAI,CAACP,MAAM,CAACQ,UAAU,CAAC;YAAEC,OAAO;gBAAEN,IAAIA;YAAG;QAAE;QAC1E,IAAI,CAACI,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,uBAAuB;QAEpE,OAAOC;IACT;IAEA,MAAaG,OAAOC,IAAoB,EAAkB;QACxD,IAAIN,IAAAA,aAAO,EAACM,OAAO,MAAM,IAAIL,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAmB,MAAM,IAAI,CAACP,MAAM,CAACQ,UAAU,CAAC;YAAEC,OAAO;gBAAEG,MAAMD,KAAKC,IAAI;YAAC;QAAE;QACnF,IAAIL,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,iBAAiB,EAAEK,KAAKC,IAAI,CAAC,eAAe,CAAC,EAAE;QAE5F,MAAMC,aAAoB,MAAM,IAAI,CAACb,MAAM,CAACU,MAAM,CAAC;YAAEC,MAAM,kBAAKA;QAAO;QACvE,OAAOE;IACT;IAEA,MAAaC,OAAOX,EAAU,EAAEQ,IAAoB,EAAkB;QACpE,IAAIN,IAAAA,aAAO,EAACM,OAAO,MAAM,IAAIL,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAmB,MAAM,IAAI,CAACP,MAAM,CAACQ,UAAU,CAAC;YAAEC,OAAO;gBAAEN,IAAIA;YAAG;QAAE;QAC1E,IAAI,CAACI,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,uBAAuB;QAEpE,MAAMS,WAAW,MAAM,IAAI,CAACf,MAAM,CAACc,MAAM,CAAC;YAAEL,OAAO;gBAAEN,IAAIA;YAAG;YAAGQ,MAAM,kBAAKA;QAAO;QACjF,OAAOI;IACT;IAEA,MAAaC,OAAOb,EAAU,EAAkB;QAC9C,IAAIE,IAAAA,aAAO,EAACF,KAAK,MAAM,IAAIG,4BAAa,CAAC,KAAK,yBAAyB;QAEvE,MAAMC,YAAmB,MAAM,IAAI,CAACP,MAAM,CAACQ,UAAU,CAAC;YAAEC,OAAO;gBAAEN,IAAIA;YAAG;QAAE;QAC1E,IAAI,CAACI,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,uBAAuB;QAEpE,MAAMW,cAAc,MAAM,IAAI,CAACjB,MAAM,CAACgB,MAAM,CAAC;YAAEP,OAAO;gBAAEN,IAAIA;YAAG;QAAE;QACjE,OAAOc;IACT;;aAhDOjB,SAAS,IAAIkB,oBAAY,GAAGC,KAAK;;AAiD1C;MAEA,WAAetB"}