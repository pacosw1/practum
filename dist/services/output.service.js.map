{"version":3,"sources":["../../src/services/output.service.ts"],"sourcesContent":["import { Area, PrismaClient, Output } from '@prisma/client';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateEntryExitDto, CreateProcessDto, GetFilteredProcessesDto } from '@/dtos/process.dto';\n\nclass OutputService {\n  public exits = new PrismaClient().output;\n\n  public async getAll(): Promise<Output[]> {\n    const all: Output[] = await this.exits.findMany();\n    return all;\n  }\n\n  public async create(data: CreateEntryExitDto): Promise<Output> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findEntry: Output = await this.exits.findUnique({ where: { name: data.name } });\n    if (findEntry) throw new HttpException(409, `Output with title ${data.name} already exists`);\n\n    const createEntry: Output = await this.exits.create({ data: { ...data } });\n    return createEntry;\n  }\n\n  public async update(id: number, data: CreateEntryExitDto): Promise<Output> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findEntry: Output = await this.exits.findUnique({ where: { id: id } });\n    if (!findEntry) throw new HttpException(409, \"Output doesn't exist\");\n\n    const newEntry = await this.exits.update({ where: { id: id }, data: { ...data } });\n    return newEntry;\n  }\n\n  public async delete(id: number): Promise<Output> {\n    if (isEmpty(id)) throw new HttpException(400, \"Output doesn't exist\");\n\n    const findEntry: Output = await this.exits.findUnique({ where: { id: id } });\n    if (!findEntry) throw new HttpException(409, \"Output doesn't exist\");\n\n    const deleteEntry = await this.exits.delete({ where: { id: id } });\n    return deleteEntry;\n  }\n\n}\n\nexport default OutputService;\n"],"names":["OutputService","getAll","all","exits","findMany","create","data","isEmpty","HttpException","findEntry","findUnique","where","name","createEntry","update","id","newEntry","delete","deleteEntry","PrismaClient","output"],"mappings":"AAAA;;;;+BA6CA;;aAAA;;wBA7C2C;+BACb;sBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGxB,IAAA,AAAMA,gBAAN,MAAMA;IAGJ,MAAaC,SAA4B;QACvC,MAAMC,MAAgB,MAAM,IAAI,CAACC,KAAK,CAACC,QAAQ;QAC/C,OAAOF;IACT;IAEA,MAAaG,OAAOC,IAAwB,EAAmB;QAC7D,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAoB,MAAM,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC;YAAEC,OAAO;gBAAEC,MAAMN,KAAKM,IAAI;YAAC;QAAE;QACnF,IAAIH,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,kBAAkB,EAAEF,KAAKM,IAAI,CAAC,eAAe,CAAC,EAAE;QAE7F,MAAMC,cAAsB,MAAM,IAAI,CAACV,KAAK,CAACE,MAAM,CAAC;YAAEC,MAAM,kBAAKA;QAAO;QACxE,OAAOO;IACT;IAEA,MAAaC,OAAOC,EAAU,EAAET,IAAwB,EAAmB;QACzE,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAoB,MAAM,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC;YAAEC,OAAO;gBAAEI,IAAIA;YAAG;QAAE;QAC1E,IAAI,CAACN,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,wBAAwB;QAErE,MAAMQ,WAAW,MAAM,IAAI,CAACb,KAAK,CAACW,MAAM,CAAC;YAAEH,OAAO;gBAAEI,IAAIA;YAAG;YAAGT,MAAM,kBAAKA;QAAO;QAChF,OAAOU;IACT;IAEA,MAAaC,OAAOF,EAAU,EAAmB;QAC/C,IAAIR,IAAAA,aAAO,EAACQ,KAAK,MAAM,IAAIP,4BAAa,CAAC,KAAK,wBAAwB;QAEtE,MAAMC,YAAoB,MAAM,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC;YAAEC,OAAO;gBAAEI,IAAIA;YAAG;QAAE;QAC1E,IAAI,CAACN,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,wBAAwB;QAErE,MAAMU,cAAc,MAAM,IAAI,CAACf,KAAK,CAACc,MAAM,CAAC;YAAEN,OAAO;gBAAEI,IAAIA;YAAG;QAAE;QAChE,OAAOG;IACT;;aAnCOf,QAAQ,IAAIgB,oBAAY,GAAGC,MAAM;;AAqC1C;MAEA,WAAepB"}