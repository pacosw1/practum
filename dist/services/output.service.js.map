{"version":3,"sources":["../../src/services/output.service.ts"],"sourcesContent":["import { Area, PrismaClient, Output } from '@prisma/client';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateEntryExitDto, CreateProcessDto, GetFilteredProcessesDto } from '@/dtos/process.dto';\n\nclass OutputService {\n  public exits = new PrismaClient().output;\n\n  public async getAll(): Promise<Output[]> {\n    const all: Output[] = await this.exits.findMany({\n      orderBy: {\n        id: 'asc',\n      },\n      where: { active: true },\n    });\n    return all;\n  }\n\n  public async create(data: CreateEntryExitDto): Promise<Output> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findEntry: Output = await this.exits.findUnique({ where: { name: data.name } });\n    if (findEntry) throw new HttpException(409, `Output with title ${data.name} already exists`);\n\n    const createEntry: Output = await this.exits.create({ data: { ...data } });\n    return createEntry;\n  }\n\n  public async update(id: number, data: CreateEntryExitDto): Promise<Output> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findEntry: Output = await this.exits.findUnique({ where: { id: id } });\n    if (!findEntry || (findEntry && !findEntry.active)) throw new HttpException(409, \"Output doesn't exist\");\n\n    const newEntry = await this.exits.update({ where: { id: id }, data: { ...data } });\n    return newEntry;\n  }\n\n  public async delete(id: number): Promise<Output> {\n    if (isEmpty(id)) throw new HttpException(400, \"Output doesn't exist\");\n\n    const findEntry: Output = await this.exits.findUnique({ where: { id: id } });\n    if (!findEntry) throw new HttpException(409, \"Output doesn't exist\");\n\n    await new PrismaClient().outputsOnProcess.deleteMany({ where: { outputId: id } });\n\n    const deleteEntry = await this.exits.update({ where: { id: id }, data: { ...findEntry, active: false } });\n\n    return deleteEntry;\n  }\n}\n\nexport default OutputService;\n"],"names":["OutputService","getAll","all","exits","findMany","orderBy","id","where","active","create","data","isEmpty","HttpException","findEntry","findUnique","name","createEntry","update","newEntry","delete","PrismaClient","outputsOnProcess","deleteMany","outputId","deleteEntry","output"],"mappings":"AAAA;;;;+BAoDA;;aAAA;;wBApD2C;+BACb;sBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGxB,IAAA,AAAMA,gBAAN,MAAMA;IAGJ,MAAaC,SAA4B;QACvC,MAAMC,MAAgB,MAAM,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC;YAC9CC,SAAS;gBACPC,IAAI;YACN;YACAC,OAAO;gBAAEC,QAAQ,IAAI;YAAC;QACxB;QACA,OAAON;IACT;IAEA,MAAaO,OAAOC,IAAwB,EAAmB;QAC7D,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAoB,MAAM,IAAI,CAACV,KAAK,CAACW,UAAU,CAAC;YAAEP,OAAO;gBAAEQ,MAAML,KAAKK,IAAI;YAAC;QAAE;QACnF,IAAIF,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,kBAAkB,EAAEF,KAAKK,IAAI,CAAC,eAAe,CAAC,EAAE;QAE7F,MAAMC,cAAsB,MAAM,IAAI,CAACb,KAAK,CAACM,MAAM,CAAC;YAAEC,MAAM,kBAAKA;QAAO;QACxE,OAAOM;IACT;IAEA,MAAaC,OAAOX,EAAU,EAAEI,IAAwB,EAAmB;QACzE,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAoB,MAAM,IAAI,CAACV,KAAK,CAACW,UAAU,CAAC;YAAEP,OAAO;gBAAED,IAAIA;YAAG;QAAE;QAC1E,IAAI,CAACO,aAAcA,aAAa,CAACA,UAAUL,MAAM,EAAG,MAAM,IAAII,4BAAa,CAAC,KAAK,wBAAwB;QAEzG,MAAMM,WAAW,MAAM,IAAI,CAACf,KAAK,CAACc,MAAM,CAAC;YAAEV,OAAO;gBAAED,IAAIA;YAAG;YAAGI,MAAM,kBAAKA;QAAO;QAChF,OAAOQ;IACT;IAEA,MAAaC,OAAOb,EAAU,EAAmB;QAC/C,IAAIK,IAAAA,aAAO,EAACL,KAAK,MAAM,IAAIM,4BAAa,CAAC,KAAK,wBAAwB;QAEtE,MAAMC,YAAoB,MAAM,IAAI,CAACV,KAAK,CAACW,UAAU,CAAC;YAAEP,OAAO;gBAAED,IAAIA;YAAG;QAAE;QAC1E,IAAI,CAACO,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,wBAAwB;QAErE,MAAM,IAAIQ,oBAAY,GAAGC,gBAAgB,CAACC,UAAU,CAAC;YAAEf,OAAO;gBAAEgB,UAAUjB;YAAG;QAAE;QAE/E,MAAMkB,cAAc,MAAM,IAAI,CAACrB,KAAK,CAACc,MAAM,CAAC;YAAEV,OAAO;gBAAED,IAAIA;YAAG;YAAGI,MAAM,qCAAKG;gBAAWL,QAAQ,KAAK;;QAAG;QAEvG,OAAOgB;IACT;;aA3COrB,QAAQ,IAAIiB,oBAAY,GAAGK,MAAM;;AA4C1C;MAEA,WAAezB"}