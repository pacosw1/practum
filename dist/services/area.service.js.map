{"version":3,"sources":["../../src/services/area.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Area, PrismaClient, User } from '@prisma/client';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateAreaDto } from '@/dtos/areas.dto';\n\nclass AreaService {\n  public areas = new PrismaClient().area;\n\n  public async getAllAreas(): Promise<Area[]> {\n    const allAreas: Area[] = await this.areas.findMany();\n    return allAreas;\n  }\n\n  public async getAreaGivenId(id: number): Promise<Area> {\n    if (isEmpty(id)) throw new HttpException(400, 'id is empty');\n\n    const findArea: Area = await this.areas.findUnique({ where: { id: id } });\n    if (!findArea) throw new HttpException(409, \"Area doesn't exist\");\n\n    return findArea;\n  }\n\n  public async createArea(areaData: CreateAreaDto): Promise<Area> {\n    if (isEmpty(areaData)) throw new HttpException(400, 'userData is empty');\n\n    const findArea: Area = await this.areas.findUnique({ where: { name: areaData.name } });\n    if (findArea) throw new HttpException(409, `Area with title ${areaData.name} already exists`);\n\n    const createAreaData: Area = await this.areas.create({ data: { ...areaData } });\n    return createAreaData;\n  }\n\n  public async updateArea(id: number, data: CreateAreaDto): Promise<Area> {\n    if (isEmpty(data)) throw new HttpException(400, 'userData is empty');\n\n    const findArea: Area = await this.areas.findUnique({ where: { id: id } });\n    if (!findArea) throw new HttpException(409, \"User doesn't exist\");\n\n    const newArea = await this.areas.update({ where: { id: id }, data: { ...data } });\n    return newArea;\n  }\n\n  public async deleteArea(id: number): Promise<Area> {\n    if (isEmpty(id)) throw new HttpException(400, \"User doesn't existId\");\n\n    const findArea: Area = await this.areas.findUnique({ where: { id: id } });\n    if (!findArea) throw new HttpException(409, \"User doesn't exist\");\n\n    const deleteAreaData = await this.areas.delete({ where: { id: id } });\n    return deleteAreaData;\n  }\n}\n\nexport default AreaService;\n"],"names":["AreaService","getAllAreas","allAreas","areas","findMany","getAreaGivenId","id","isEmpty","HttpException","findArea","findUnique","where","createArea","areaData","name","createAreaData","create","data","updateArea","newArea","update","deleteArea","deleteAreaData","delete","PrismaClient","area"],"mappings":"AAAA;;;;+BAuDA;;aAAA;;wBAtDyC;+BAEX;sBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGxB,IAAA,AAAMA,cAAN,MAAMA;IAGJ,MAAaC,cAA+B;QAC1C,MAAMC,WAAmB,MAAM,IAAI,CAACC,KAAK,CAACC,QAAQ;QAClD,OAAOF;IACT;IAEA,MAAaG,eAAeC,EAAU,EAAiB;QACrD,IAAIC,IAAAA,aAAO,EAACD,KAAK,MAAM,IAAIE,4BAAa,CAAC,KAAK,eAAe;QAE7D,MAAMC,WAAiB,MAAM,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC;YAAEC,OAAO;gBAAEL,IAAIA;YAAG;QAAE;QACvE,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAiB;QAC9D,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMC,WAAiB,MAAM,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC;YAAEC,OAAO;gBAAEG,MAAMD,SAASC,IAAI;YAAC;QAAE;QACpF,IAAIL,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,gBAAgB,EAAEK,SAASC,IAAI,CAAC,eAAe,CAAC,EAAE;QAE9F,MAAMC,iBAAuB,MAAM,IAAI,CAACZ,KAAK,CAACa,MAAM,CAAC;YAAEC,MAAM,kBAAKJ;QAAW;QAC7E,OAAOE;IACT;IAEA,MAAaG,WAAWZ,EAAU,EAAEW,IAAmB,EAAiB;QACtE,IAAIV,IAAAA,aAAO,EAACU,OAAO,MAAM,IAAIT,4BAAa,CAAC,KAAK,qBAAqB;QAErE,MAAMC,WAAiB,MAAM,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC;YAAEC,OAAO;gBAAEL,IAAIA;YAAG;QAAE;QACvE,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAMW,UAAU,MAAM,IAAI,CAAChB,KAAK,CAACiB,MAAM,CAAC;YAAET,OAAO;gBAAEL,IAAIA;YAAG;YAAGW,MAAM,kBAAKA;QAAO;QAC/E,OAAOE;IACT;IAEA,MAAaE,WAAWf,EAAU,EAAiB;QACjD,IAAIC,IAAAA,aAAO,EAACD,KAAK,MAAM,IAAIE,4BAAa,CAAC,KAAK,wBAAwB;QAEtE,MAAMC,WAAiB,MAAM,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC;YAAEC,OAAO;gBAAEL,IAAIA;YAAG;QAAE;QACvE,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAMc,iBAAiB,MAAM,IAAI,CAACnB,KAAK,CAACoB,MAAM,CAAC;YAAEZ,OAAO;gBAAEL,IAAIA;YAAG;QAAE;QACnE,OAAOgB;IACT;;aA5COnB,QAAQ,IAAIqB,oBAAY,GAAGC,IAAI;;AA6CxC;MAEA,WAAezB"}