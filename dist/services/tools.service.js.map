{"version":3,"sources":["../../src/services/tools.service.ts"],"sourcesContent":["import { PrismaClient, Tool } from '@prisma/client';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateEntryExitDto } from '@/dtos/process.dto';\n\nclass ToolsService {\n  public exits = new PrismaClient().tool;\n\n  public async getAll(): Promise<Tool[]> {\n    const all: Tool[] = await this.exits.findMany({\n      orderBy: {\n        id: 'asc',\n      },\n      where: { active: true },\n    });\n    return all;\n  }\n\n  public async create(data: CreateEntryExitDto): Promise<Tool> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findEntry: Tool = await this.exits.findUnique({ where: { name: data.name } });\n    if (findEntry) throw new HttpException(409, `Tool with title ${data.name} already exists`);\n\n    const createEntry: Tool = await this.exits.create({ data: { ...data } });\n    return createEntry;\n  }\n\n  public async update(id: number, data: CreateEntryExitDto): Promise<Tool> {\n    if (isEmpty(data)) throw new HttpException(400, 'data is empty');\n\n    const findEntry: Tool = await this.exits.findUnique({ where: { id: id } });\n    if (!findEntry || (findEntry && !findEntry.active)) throw new HttpException(409, \"Tool doesn't exist\");\n\n    const newEntry = await this.exits.update({ where: { id: id }, data: { ...data } });\n    return newEntry;\n  }\n\n  public async delete(id: number): Promise<Tool> {\n    if (isEmpty(id)) throw new HttpException(400, \"Tool doesn't exist\");\n\n    const findEntry: Tool = await this.exits.findUnique({ where: { id: id } });\n    if (!findEntry) throw new HttpException(409, \"Tool doesn't exist\");\n\n    await new PrismaClient().toolsOnProcess.deleteMany({ where: { toolId: id } });\n\n    const deleteEntry = await this.exits.update({\n      where: { id: id },\n      data: {\n        ...findEntry,\n        active: false,\n      },\n    });\n    return deleteEntry;\n  }\n}\n\nexport default ToolsService;\n"],"names":["ToolsService","getAll","all","exits","findMany","orderBy","id","where","active","create","data","isEmpty","HttpException","findEntry","findUnique","name","createEntry","update","newEntry","delete","PrismaClient","toolsOnProcess","deleteMany","toolId","deleteEntry","tool"],"mappings":"AAAA;;;;+BAyDA;;aAAA;;wBAzDmC;+BACL;sBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGxB,IAAA,AAAMA,eAAN,MAAMA;IAGJ,MAAaC,SAA0B;QACrC,MAAMC,MAAc,MAAM,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC;YAC5CC,SAAS;gBACPC,IAAI;YACN;YACAC,OAAO;gBAAEC,QAAQ,IAAI;YAAC;QACxB;QACA,OAAON;IACT;IAEA,MAAaO,OAAOC,IAAwB,EAAiB;QAC3D,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAkB,MAAM,IAAI,CAACV,KAAK,CAACW,UAAU,CAAC;YAAEP,OAAO;gBAAEQ,MAAML,KAAKK,IAAI;YAAC;QAAE;QACjF,IAAIF,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,gBAAgB,EAAEF,KAAKK,IAAI,CAAC,eAAe,CAAC,EAAE;QAE3F,MAAMC,cAAoB,MAAM,IAAI,CAACb,KAAK,CAACM,MAAM,CAAC;YAAEC,MAAM,kBAAKA;QAAO;QACtE,OAAOM;IACT;IAEA,MAAaC,OAAOX,EAAU,EAAEI,IAAwB,EAAiB;QACvE,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,iBAAiB;QAEjE,MAAMC,YAAkB,MAAM,IAAI,CAACV,KAAK,CAACW,UAAU,CAAC;YAAEP,OAAO;gBAAED,IAAIA;YAAG;QAAE;QACxE,IAAI,CAACO,aAAcA,aAAa,CAACA,UAAUL,MAAM,EAAG,MAAM,IAAII,4BAAa,CAAC,KAAK,sBAAsB;QAEvG,MAAMM,WAAW,MAAM,IAAI,CAACf,KAAK,CAACc,MAAM,CAAC;YAAEV,OAAO;gBAAED,IAAIA;YAAG;YAAGI,MAAM,kBAAKA;QAAO;QAChF,OAAOQ;IACT;IAEA,MAAaC,OAAOb,EAAU,EAAiB;QAC7C,IAAIK,IAAAA,aAAO,EAACL,KAAK,MAAM,IAAIM,4BAAa,CAAC,KAAK,sBAAsB;QAEpE,MAAMC,YAAkB,MAAM,IAAI,CAACV,KAAK,CAACW,UAAU,CAAC;YAAEP,OAAO;gBAAED,IAAIA;YAAG;QAAE;QACxE,IAAI,CAACO,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAEnE,MAAM,IAAIQ,oBAAY,GAAGC,cAAc,CAACC,UAAU,CAAC;YAAEf,OAAO;gBAAEgB,QAAQjB;YAAG;QAAE;QAE3E,MAAMkB,cAAc,MAAM,IAAI,CAACrB,KAAK,CAACc,MAAM,CAAC;YAC1CV,OAAO;gBAAED,IAAIA;YAAG;YAChBI,MAAM,qCACDG;gBACHL,QAAQ,KAAK;;QAEjB;QACA,OAAOgB;IACT;;aAhDOrB,QAAQ,IAAIiB,oBAAY,GAAGK,IAAI;;AAiDxC;MAEA,WAAezB"}