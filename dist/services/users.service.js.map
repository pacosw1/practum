{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { PrismaClient, User } from '@prisma/client';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public users = new PrismaClient().user;\n\n  public async findAllUser(): Promise<User[]> {\n    const allUser: User[] = await this.users.findMany({\n      orderBy: {\n        id: 'asc',\n      },\n    });\n    return allUser;\n  }\n\n  public async findUserById(userId: number): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, 'UserId is empty');\n\n    const findUser: User = await this.users.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await this.users.findUnique({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.users.create({ data: { ...userData, password: hashedPassword } });\n    return createUserData;\n  }\n\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await this.users.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    const updateUserData = await this.users.update({ where: { id: userId }, data: { ...userData, password: hashedPassword } });\n    return updateUserData;\n  }\n\n  public async deleteUser(userId: number): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, \"User doesn't existId\");\n\n    const findUser: User = await this.users.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const deleteUserData = await this.users.delete({ where: { id: userId } });\n    return deleteUserData;\n  }\n}\n\nexport default UserService;\n"],"names":["UserService","findAllUser","allUser","users","findMany","orderBy","id","findUserById","userId","isEmpty","HttpException","findUser","findUnique","where","createUser","userData","email","hashedPassword","hash","password","createUserData","create","data","updateUser","updateUserData","update","deleteUser","deleteUserData","delete","PrismaClient","user"],"mappings":"AAAA;;;;+BA4DA;;aAAA;;wBA5DqB;wBACc;+BAEL;sBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,cAAN,MAAMA;IAGJ,MAAaC,cAA+B;QAC1C,MAAMC,UAAkB,MAAM,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC;YAChDC,SAAS;gBACPC,IAAI;YACN;QACF;QACA,OAAOJ;IACT;IAEA,MAAaK,aAAaC,MAAc,EAAiB;QACvD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,WAAiB,MAAM,IAAI,CAACR,KAAK,CAACS,UAAU,CAAC;YAAEC,OAAO;gBAAEP,IAAIE;YAAO;QAAE;QAC3E,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAiB;QAC9D,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMC,WAAiB,MAAM,IAAI,CAACR,KAAK,CAACS,UAAU,CAAC;YAAEC,OAAO;gBAAEG,OAAOD,SAASC,KAAK;YAAC;QAAE;QACtF,IAAIL,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEK,SAASC,KAAK,CAAC,eAAe,CAAC,EAAE;QAE1F,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAM,IAAI,CAACjB,KAAK,CAACkB,MAAM,CAAC;YAAEC,MAAM,qCAAKP;gBAAUI,UAAUF;;QAAiB;QACvG,OAAOG;IACT;IAEA,MAAaG,WAAWf,MAAc,EAAEO,QAAuB,EAAiB;QAC9E,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMC,WAAiB,MAAM,IAAI,CAACR,KAAK,CAACS,UAAU,CAAC;YAAEC,OAAO;gBAAEP,IAAIE;YAAO;QAAE;QAC3E,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAMO,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMK,iBAAiB,MAAM,IAAI,CAACrB,KAAK,CAACsB,MAAM,CAAC;YAAEZ,OAAO;gBAAEP,IAAIE;YAAO;YAAGc,MAAM,qCAAKP;gBAAUI,UAAUF;;QAAiB;QACxH,OAAOO;IACT;IAEA,MAAaE,WAAWlB,MAAc,EAAiB;QACrD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,wBAAwB;QAE1E,MAAMC,WAAiB,MAAM,IAAI,CAACR,KAAK,CAACS,UAAU,CAAC;YAAEC,OAAO;gBAAEP,IAAIE;YAAO;QAAE;QAC3E,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAMiB,iBAAiB,MAAM,IAAI,CAACxB,KAAK,CAACyB,MAAM,CAAC;YAAEf,OAAO;gBAAEP,IAAIE;YAAO;QAAE;QACvE,OAAOmB;IACT;;aAlDOxB,QAAQ,IAAI0B,oBAAY,GAAGC,IAAI;;AAmDxC;MAEA,WAAe9B"}