{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { PrismaClient, User } from '@prisma/client';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public users = new PrismaClient().user;\n\n  public async findAllUser(): Promise<User[]> {\n    const allUser: User[] = await this.users.findMany();\n    return allUser;\n  }\n\n  public async findUserById(userId: number): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, 'UserId is empty');\n\n    const findUser: User = await this.users.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await this.users.findUnique({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.users.create({ data: { ...userData, password: hashedPassword } });\n    return createUserData;\n  }\n\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await this.users.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    const updateUserData = await this.users.update({ where: { id: userId }, data: { ...userData, password: hashedPassword } });\n    return updateUserData;\n  }\n\n  public async deleteUser(userId: number): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, \"User doesn't existId\");\n\n    const findUser: User = await this.users.findUnique({ where: { id: userId } });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const deleteUserData = await this.users.delete({ where: { id: userId } });\n    return deleteUserData;\n  }\n}\n\nexport default UserService;\n"],"names":["UserService","findAllUser","allUser","users","findMany","findUserById","userId","isEmpty","HttpException","findUser","findUnique","where","id","createUser","userData","email","hashedPassword","hash","password","createUserData","create","data","updateUser","updateUserData","update","deleteUser","deleteUserData","delete","PrismaClient","user"],"mappings":"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"}