{"version":3,"sources":["../../src/services/process.service.ts"],"sourcesContent":["import { Area, PrismaClient, Process } from '@prisma/client';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateProcessDto, GetFilteredProcessesDto } from '@/dtos/process.dto';\n\nclass ProcessService {\n  public processes = new PrismaClient().process;\n\n  public async getAll(): Promise<Process[]> {\n    const all: Process[] = await this.processes.findMany();\n    return all;\n  }\n\n  public async getGivenAreaAndGroup(areaId: number, groupId: number): Promise<Process[]> {\n    const filteredProcess: Process[] = await this.processes.findMany({ where: { areaId: areaId, groupId: groupId } });\n    return filteredProcess;\n  }\n\n  public async getGivenId(id: number): Promise<Process> {\n    if (isEmpty(id)) throw new HttpException(400, 'id is empty');\n\n    const findProcess: Process = await this.processes.findUnique({ where: { id: id } });\n    if (!findProcess) throw new HttpException(409, \"Area doesn't exist\");\n\n    return findProcess;\n  }\n\n  public async create(data: CreateProcessDto): Promise<Process> {\n    if (isEmpty(data)) throw new HttpException(400, 'userData is empty');\n\n    data.areaId = Number(data.areaId)\n    data.groupId = Number(data.groupId)\n\n    const findProcess: Process = await this.processes.findUnique({ where: { name: data.name } });\n    if (findProcess) throw new HttpException(409, `Process with title ${data.name} already exists`);\n\n    const createData: Process = await this.processes.create({ data: { ...data } });\n    return createData;\n  }\n\n  public async update(id: number, data: CreateProcessDto): Promise<Process> {\n    if (isEmpty(data)) throw new HttpException(400, 'userData is empty');\n\n    const findProcess: Process = await this.processes.findUnique({ where: { id: id } });\n    if (!findProcess) throw new HttpException(409, \"User doesn't exist\");\n\n    const newProcess = await this.processes.update({ where: { id: id }, data: { ...data } });\n    return newProcess;\n  }\n\n  public async delete(id: number): Promise<Process> {\n    if (isEmpty(id)) throw new HttpException(400, \"User doesn't existId\");\n\n    const findProcess: Process = await this.processes.findUnique({ where: { id: id } });\n    if (!findProcess) throw new HttpException(409, \"User doesn't exist\");\n\n    const deleteProcess = await this.processes.delete({ where: { id: id } });\n    return deleteProcess;\n  }\n}\n\nexport default ProcessService;\n"],"names":["ProcessService","getAll","all","processes","findMany","getGivenAreaAndGroup","areaId","groupId","filteredProcess","where","getGivenId","id","isEmpty","HttpException","findProcess","findUnique","create","data","Number","name","createData","update","newProcess","delete","deleteProcess","PrismaClient","process"],"mappings":"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"}