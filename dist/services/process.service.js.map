{"version":3,"sources":["../../src/services/process.service.ts"],"sourcesContent":["import { Area, EntriesOnProcess, OutputsOnProcess, PrismaClient, Process } from '@prisma/client';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateProcessDto, GetFilteredProcessesDto } from '@/dtos/process.dto';\n\nclass ProcessService {\n  public processes = new PrismaClient().process;\n\n  public async getAll(): Promise<Process[]> {\n    const all: Process[] = await this.processes.findMany({\n      orderBy: {\n        id: 'asc',\n      },\n      where: { active: true },\n    });\n    return all;\n  }\n\n  public async getGivenAreaAndGroup(areaId: number, groupId: number): Promise<Process[]> {\n    const filteredProcess: Process[] = await this.processes.findMany({ where: { areaId: areaId, groupId: groupId } });\n    return filteredProcess;\n  }\n\n  public async getGivenId(id: number): Promise<\n    Process & {\n      entries: EntriesOnProcess[];\n      // outputs: OutputsOnProcess[];\n    }\n  > {\n    if (isEmpty(id)) throw new HttpException(400, 'id is empty');\n\n    const findProcess = await this.processes.findUnique({\n      where: { id: id },\n      include: {\n        entries: {\n          include: {\n            entry: true,\n          },\n        },\n        // outputs: {\n        //   include: {\n        //     output: true,\n        //   },\n        // },\n        tools: {\n          include: {\n            tool: true,\n          },\n        },\n      },\n    });\n\n    if (!findProcess || (findProcess && !findProcess.active)) throw new HttpException(409, \"Area doesn't exist\");\n\n    return findProcess;\n  }\n\n  public async create(data: CreateProcessDto): Promise<Process> {\n    if (isEmpty(data)) throw new HttpException(400, 'userData is empty');\n\n    data.areaId = Number(data.areaId);\n    data.groupId = Number(data.groupId);\n\n    const findProcess: Process = await this.processes.findUnique({ where: { name: data.name } });\n    if (findProcess || (findProcess && !findProcess.active)) throw new HttpException(409, `Process with title ${data.name} already exists`);\n\n    const connectEntries = Array.from(\n      data.existingEntries.map(id => {\n        return {\n          isExit: false,\n          entry: {\n            connect: {\n              id: id,\n            },\n          },\n        };\n      }),\n    );\n\n    const newEntries = Array.from(\n      data.newEntries.map(newEntry => {\n        return {\n          isExit: false,\n          entry: {\n            create: {\n              ...newEntry,\n            },\n          },\n        };\n      }),\n    );\n\n    const connectOutputs = Array.from(\n      data.existingOutputs.map(id => {\n        return {\n          isExit: true,\n          entry: {\n            connect: {\n              id: id,\n            },\n          },\n        };\n      }),\n    );\n\n    const newOutputs = Array.from(\n      data.newOutputs.map(newOutput => {\n        return {\n          isExit: true,\n          entry: {\n            create: {\n              ...newOutput,\n            },\n          },\n        };\n      }),\n    );\n\n    const connectTools = Array.from(\n      data.existingTools.map(id => {\n        return {\n          tool: {\n            connect: {\n              id: id,\n            },\n          },\n        };\n      }),\n    );\n\n    const newTools = Array.from(\n      data.newTools.map(newTool => {\n        return {\n          tool: {\n            create: {\n              ...newTool,\n            },\n          },\n        };\n      }),\n    );\n\n    const finalData = {\n      name: data.name,\n      areaId: data.areaId,\n      groupId: data.groupId,\n      entries: {\n        create: [...newEntries, ...connectEntries, ...newOutputs, ...connectOutputs],\n      },\n      tools: {\n        create: [...newTools, ...connectTools],\n      },\n    };\n\n    // @ts-ignore\n    const createData: Process = await this.processes.create({ data: { ...finalData } });\n    return createData;\n  }\n\n  public async update(id: number, data: CreateProcessDto): Promise<Process> {\n    if (isEmpty(data)) throw new HttpException(400, 'userData is empty');\n\n    const findProcess: Process = await this.processes.findUnique({\n      where: { id: id },\n      include: {\n        entries: {\n          include: {\n            entry: true,\n          },\n        },\n        // outputs: {\n        //   include: {\n        //     output: true,\n        //   },\n        // },\n      },\n    });\n\n    if (!findProcess || (findProcess && !findProcess.active)) throw new HttpException(409, \"User doesn't exist\");\n\n    const oldEntries = await new PrismaClient().entriesOnProcess.findMany({\n      where: { processId: id, isExit: false },\n    });\n\n    const oldOutputs = await new PrismaClient().entriesOnProcess.findMany({\n      where: { processId: id, isExit: true },\n    });\n\n    // let testOldOutputs = await new PrismaClient().entriesOnProcess.findMany({\n    //   where: { processId: id, isExit: true },\n    // });\n\n    const oldTools = await new PrismaClient().toolsOnProcess.findMany({\n      where: { processId: id },\n    });\n\n    //TODO make a function for this\n\n    const old = new Set();\n    const updated = new Set();\n    const disconnectEntries = [];\n    const connectEntries = [];\n\n    for (const entry of data.existingEntries) {\n      updated.add(entry);\n    }\n\n    for (const entry of oldEntries) {\n      old.add(entry.entryId);\n\n      if (!updated.has(entry.entryId)) {\n        disconnectEntries.push(entry.entryId);\n      }\n    }\n\n    for (const entry of data.existingEntries) {\n      if (!old.has(entry)) {\n        connectEntries.push({ isExit: false, entry: { connect: { id: entry } } });\n      }\n    }\n\n    const oldOut = new Set();\n    const updatedOut = new Set();\n    const disconnectOutputs = [];\n    const connectOutputs = [];\n\n    for (const output of data.existingOutputs) {\n      updated.add(output);\n    }\n\n    for (const output of oldOutputs) {\n      old.add(output.entryId);\n\n      if (!updatedOut.has(output.entryId)) {\n        disconnectOutputs.push(output.entryId);\n      }\n    }\n\n    for (const output of data.existingOutputs) {\n      if (!oldOut.has(output)) {\n        connectOutputs.push({ isExit: true, entry: { connect: { id: output } } });\n      }\n    }\n\n    const oldToolSet = new Set();\n    const updatedTools = new Set();\n    const disconnectTools = [];\n    const connectTools = [];\n\n    for (const tool of data.existingTools) {\n      updatedTools.add(tool);\n    }\n\n    for (const tool of oldTools) {\n      oldToolSet.add(tool.toolId);\n\n      if (!updatedTools.has(tool.toolId)) {\n        disconnectTools.push(tool.toolId);\n      }\n    }\n\n    for (const tool of data.existingTools) {\n      if (!oldToolSet.has(tool)) {\n        connectTools.push({ tool: { connect: { id: tool } } });\n      }\n    }\n\n    const newTools = Array.from(\n      data.newTools.map(newTool => {\n        return {\n          tool: {\n            create: {\n              ...newTool,\n            },\n          },\n        };\n      }),\n    );\n\n    const newEntries = Array.from(\n      data.newEntries.map(newEntry => {\n        return {\n          entry: {\n            isExit: false,\n            create: {\n              ...newEntry,\n            },\n          },\n        };\n      }),\n    );\n\n    const newOutputs = Array.from(\n      data.newOutputs.map(newEntry => {\n        return {\n          isExit: true,\n          entry: {\n            create: {\n              ...newEntry,\n            },\n          },\n        };\n      }),\n    );\n\n    data.areaId = Number(data.areaId);\n    data.groupId = Number(data.groupId);\n\n    const finalData = {\n      name: data.name,\n      areaId: data.areaId,\n      groupId: data.groupId,\n      entries: {\n        create: [...newEntries, ...connectEntries, ...newOutputs, ...connectOutputs],\n      },\n      // outputs: {\n      //   // create: [...newOutputs, ...connectOutputs],\n      // },\n      tools: {\n        create: [...newTools, ...connectTools],\n      },\n    };\n\n    const entryClient = new PrismaClient().entriesOnProcess;\n    const toolClient = new PrismaClient().toolsOnProcess;\n\n    await entryClient.deleteMany({ where: { processId: id, entryId: { in: disconnectEntries }, isExit: false } });\n    await entryClient.deleteMany({ where: { processId: id, entryId: { in: disconnectOutputs }, isExit: true } });\n\n    // const deleteTools = await toolClient.deleteMany({ where: { processId: id, toolId: { in: disconnectTools } } });\n\n    const newProcess = await this.processes.update({ where: { id: id }, data: { ...finalData } });\n    return newProcess;\n  }\n\n  public async delete(id: number): Promise<Process> {\n    if (isEmpty(id)) throw new HttpException(400, \"User doesn't existId\");\n\n    const findProcess: Process = await this.processes.findUnique({ where: { id: id } });\n    if (!findProcess) throw new HttpException(409, \"User doesn't exist\");\n\n    const deleteProcess = await this.processes.update({ where: { id: id }, data: { ...findProcess, active: false } });\n    return deleteProcess;\n  }\n}\n\nexport default ProcessService;\n"],"names":["ProcessService","getAll","all","processes","findMany","orderBy","id","where","active","getGivenAreaAndGroup","areaId","groupId","filteredProcess","getGivenId","isEmpty","HttpException","findProcess","findUnique","include","entries","entry","tools","tool","create","data","Number","name","connectEntries","Array","from","existingEntries","map","isExit","connect","newEntries","newEntry","connectOutputs","existingOutputs","newOutputs","newOutput","connectTools","existingTools","newTools","newTool","finalData","createData","update","oldEntries","PrismaClient","entriesOnProcess","processId","oldOutputs","oldTools","toolsOnProcess","old","Set","updated","disconnectEntries","add","entryId","has","push","oldOut","updatedOut","disconnectOutputs","output","oldToolSet","updatedTools","disconnectTools","toolId","entryClient","toolClient","deleteMany","in","newProcess","delete","deleteProcess","process"],"mappings":"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"}