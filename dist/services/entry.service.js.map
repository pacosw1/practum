{"version":3,"sources":["../../src/services/entry.service.ts"],"sourcesContent":["import { Area, PrismaClient, Process, Entry, EntriesOnProcess } from '@prisma/client';\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\nimport { CreateEntryExitDto, CreateProcessDto, GetFilteredProcessesDto } from '@/dtos/process.dto';\n\nclass EntryService {\n  public entries = new PrismaClient().entry;\n\n  public async getAll(): Promise<Entry[]> {\n    const all: Entry[] = await this.entries.findMany({\n      orderBy: {\n        id: 'asc',\n      },\n    });\n    return all;\n  }\n\n  public async create(data: CreateEntryExitDto): Promise<Entry> {\n    if (isEmpty(data)) throw new HttpException(400, 'userData is empty');\n\n    const findEntry: Entry = await this.entries.findUnique({ where: { name: data.name } });\n    if (findEntry) throw new HttpException(409, `Process with title ${data.name} already exists`);\n\n    const createEntry: Entry = await this.entries.create({ data: { ...data } });\n    return createEntry;\n  }\n\n  public async update(id: number, data: CreateEntryExitDto): Promise<Entry> {\n    if (isEmpty(data)) throw new HttpException(400, 'userData is empty');\n\n    const findEntry: Entry = await this.entries.findUnique({ where: { id: id } });\n    if (!findEntry) throw new HttpException(409, \"Entry doesn't exist\");\n\n    const newEntry = await this.entries.update({ where: { id: id }, data: { ...data } });\n    return newEntry;\n  }\n\n  public async delete(id: number): Promise<Entry> {\n    if (isEmpty(id)) throw new HttpException(400, \"User doesn't existId\");\n\n    const findEntry: Entry = await this.entries.findUnique({ where: { id: id } });\n    if (!findEntry) throw new HttpException(409, \"User doesn't exist\");\n\n    const deleteEntry = await this.entries.delete({ where: { id: id } });\n    return deleteEntry;\n  }\n}\n\nexport default EntryService;\n"],"names":["EntryService","getAll","all","entries","findMany","orderBy","id","create","data","isEmpty","HttpException","findEntry","findUnique","where","name","createEntry","update","newEntry","delete","deleteEntry","PrismaClient","entry"],"mappings":"AAAA;;;;+BAgDA;;aAAA;;wBAhDqE;+BACvC;sBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGxB,IAAA,AAAMA,eAAN,MAAMA;IAGJ,MAAaC,SAA2B;QACtC,MAAMC,MAAe,MAAM,IAAI,CAACC,OAAO,CAACC,QAAQ,CAAC;YAC/CC,SAAS;gBACPC,IAAI;YACN;QACF;QACA,OAAOJ;IACT;IAEA,MAAaK,OAAOC,IAAwB,EAAkB;QAC5D,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,qBAAqB;QAErE,MAAMC,YAAmB,MAAM,IAAI,CAACR,OAAO,CAACS,UAAU,CAAC;YAAEC,OAAO;gBAAEC,MAAMN,KAAKM,IAAI;YAAC;QAAE;QACpF,IAAIH,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,mBAAmB,EAAEF,KAAKM,IAAI,CAAC,eAAe,CAAC,EAAE;QAE9F,MAAMC,cAAqB,MAAM,IAAI,CAACZ,OAAO,CAACI,MAAM,CAAC;YAAEC,MAAM,kBAAKA;QAAO;QACzE,OAAOO;IACT;IAEA,MAAaC,OAAOV,EAAU,EAAEE,IAAwB,EAAkB;QACxE,IAAIC,IAAAA,aAAO,EAACD,OAAO,MAAM,IAAIE,4BAAa,CAAC,KAAK,qBAAqB;QAErE,MAAMC,YAAmB,MAAM,IAAI,CAACR,OAAO,CAACS,UAAU,CAAC;YAAEC,OAAO;gBAAEP,IAAIA;YAAG;QAAE;QAC3E,IAAI,CAACK,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,uBAAuB;QAEpE,MAAMO,WAAW,MAAM,IAAI,CAACd,OAAO,CAACa,MAAM,CAAC;YAAEH,OAAO;gBAAEP,IAAIA;YAAG;YAAGE,MAAM,kBAAKA;QAAO;QAClF,OAAOS;IACT;IAEA,MAAaC,OAAOZ,EAAU,EAAkB;QAC9C,IAAIG,IAAAA,aAAO,EAACH,KAAK,MAAM,IAAII,4BAAa,CAAC,KAAK,wBAAwB;QAEtE,MAAMC,YAAmB,MAAM,IAAI,CAACR,OAAO,CAACS,UAAU,CAAC;YAAEC,OAAO;gBAAEP,IAAIA;YAAG;QAAE;QAC3E,IAAI,CAACK,WAAW,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAEnE,MAAMS,cAAc,MAAM,IAAI,CAAChB,OAAO,CAACe,MAAM,CAAC;YAAEL,OAAO;gBAAEP,IAAIA;YAAG;QAAE;QAClE,OAAOa;IACT;;aAvCOhB,UAAU,IAAIiB,oBAAY,GAAGC,KAAK;;AAwC3C;MAEA,WAAerB"}