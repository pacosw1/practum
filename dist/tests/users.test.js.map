{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport request from 'supertest';\nimport { PrismaClient, User } from '@prisma/client';\nimport App from '@/app';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport UserRoute from '@routes/users.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Users', () => {\n  describe('[GET] /users', () => {\n    it('response findAll users', async () => {\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findMany = jest.fn().mockReturnValue([\n        {\n          id: 1,\n          email: 'a@email.com',\n          password: await bcrypt.hash('q1w2e3r4!', 10),\n        },\n        {\n          id: 2,\n          email: 'b@email.com',\n          password: await bcrypt.hash('a1s2d3f4!', 10),\n        },\n        {\n          id: 3,\n          email: 'c@email.com',\n          password: await bcrypt.hash('z1x2c3v4!', 10),\n        },\n      ]);\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response findOne user', async () => {\n      const userId = 1;\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue({\n        id: 1,\n        email: 'a@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response Create user', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue(null);\n      users.create = jest.fn().mockReturnValue({\n        id: 1,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response Update user', async () => {\n      const userId = 1;\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n      users.update = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData).expect(200);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response Delete user', async () => {\n      const userId = 1;\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findUnique = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n      users.delete = jest.fn().mockReturnValue({\n        id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([usersRoute]);\n      return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","usersRoute","UserRoute","users","usersController","userService","findMany","jest","fn","mockReturnValue","id","email","password","bcrypt","hash","app","App","request","getServer","get","path","expect","userId","findUnique","userData","create","post","send","update","put","delete"],"mappings":"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"}