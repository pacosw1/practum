{"version":3,"sources":["../../src/tests/auth.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport request from 'supertest';\nimport { User } from '@prisma/client';\nimport App from '@/app';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport AuthRoute from '@routes/auth.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Auth', () => {\n  describe('[POST] /signup', () => {\n    it('response should have the Create userData', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const authRoute = new AuthRoute();\n      const users = authRoute.authController.authService.users;\n\n      users.findUnique = jest.fn().mockReturnValue(null);\n      users.create = jest.fn().mockReturnValue({\n        id: 1,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([authRoute]);\n      return request(app.getServer()).post(`${authRoute.path}signup`).send(userData).expect(201);\n    });\n  });\n\n  describe('[POST] /login', () => {\n    it('response should have the Set-Cookie header with the Authorization token', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const authRoute = new AuthRoute();\n      const users = authRoute.authController.authService.users;\n\n      users.findUnique = jest.fn().mockReturnValue({\n        id: 1,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      const app = new App([authRoute]);\n      return request(app.getServer())\n        .post(`${authRoute.path}login`)\n        .send(userData)\n        .expect('Set-Cookie', /^Authorization=.+/);\n    });\n  });\n\n  // describe('[POST] /logout', () => {\n  //   it('logout Set-Cookie Authorization=; Max-age=0', async () => {\n  //     const user: User = {\n  //       id: 1,\n  //       email: 'test@email.com',\n  //       password: 'q1w2e3r4',\n  //     };\n\n  //     const authRoute = new AuthRoute();\n  //     const users = authRoute.authController.authService.users;\n\n  //     users.findFirst = jest.fn().mockReturnValue({\n  //       ...user,\n  //       password: await bcrypt.hash(user.password, 10),\n  //     });\n\n  //     const app = new App([authRoute]);\n  //     return request(app.getServer())\n  //       .post(`${authRoute.path}logout`)\n  //       .expect('Set-Cookie', /^Authorization=\\;/);\n  //   });\n  // });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","userData","email","password","authRoute","AuthRoute","users","authController","authService","findUnique","jest","fn","mockReturnValue","create","id","bcrypt","hash","app","App","request","getServer","post","path","send","expect"],"mappings":"AAAA;;;;+CAAmB;kDACC;4CAEJ;kDAEM;;;;;;AAEtBA,SAAS,UAAY;IACnB,MAAM,IAAIC,QAAcC,CAAAA,UAAWC,WAAW,IAAMD,WAAW;AACjE;AAEAE,SAAS,gBAAgB,IAAM;IAC7BA,SAAS,kBAAkB,IAAM;QAC/BC,GAAG,4CAA4C,UAAY;YACzD,MAAMC,WAA0B;gBAC9BC,OAAO;gBACPC,UAAU;YACZ;YAEA,MAAMC,YAAY,IAAIC,kBAAS;YAC/B,MAAMC,QAAQF,UAAUG,cAAc,CAACC,WAAW,CAACF,KAAK;YAExDA,MAAMG,UAAU,GAAGC,KAAKC,EAAE,GAAGC,eAAe,CAAC,IAAI;YACjDN,MAAMO,MAAM,GAAGH,KAAKC,EAAE,GAAGC,eAAe,CAAC;gBACvCE,IAAI;gBACJZ,OAAOD,SAASC,KAAK;gBACrBC,UAAU,MAAMY,eAAM,CAACC,IAAI,CAACf,SAASE,QAAQ,EAAE;YACjD;YAEA,MAAMc,MAAM,IAAIC,YAAG,CAAC;gBAACd;aAAU;YAC/B,OAAOe,IAAAA,kBAAO,EAACF,IAAIG,SAAS,IAAIC,IAAI,CAAC,CAAC,EAAEjB,UAAUkB,IAAI,CAAC,MAAM,CAAC,EAAEC,IAAI,CAACtB,UAAUuB,MAAM,CAAC;QACxF;IACF;IAEAzB,SAAS,iBAAiB,IAAM;QAC9BC,GAAG,2EAA2E,UAAY;YACxF,MAAMC,WAA0B;gBAC9BC,OAAO;gBACPC,UAAU;YACZ;YAEA,MAAMC,YAAY,IAAIC,kBAAS;YAC/B,MAAMC,QAAQF,UAAUG,cAAc,CAACC,WAAW,CAACF,KAAK;YAExDA,MAAMG,UAAU,GAAGC,KAAKC,EAAE,GAAGC,eAAe,CAAC;gBAC3CE,IAAI;gBACJZ,OAAOD,SAASC,KAAK;gBACrBC,UAAU,MAAMY,eAAM,CAACC,IAAI,CAACf,SAASE,QAAQ,EAAE;YACjD;YAEA,MAAMc,MAAM,IAAIC,YAAG,CAAC;gBAACd;aAAU;YAC/B,OAAOe,IAAAA,kBAAO,EAACF,IAAIG,SAAS,IACzBC,IAAI,CAAC,CAAC,EAAEjB,UAAUkB,IAAI,CAAC,KAAK,CAAC,EAC7BC,IAAI,CAACtB,UACLuB,MAAM,CAAC,cAAc;QAC1B;IACF;AAwBF"}